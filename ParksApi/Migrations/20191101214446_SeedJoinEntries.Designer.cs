// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParksApi.Models;

namespace ParksApi.Migrations
{
    [DbContext(typeof(ParksApiContext))]
    [Migration("20191101214446_SeedJoinEntries")]
    partial class SeedJoinEntries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ParksApi.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Line1");

                    b.Property<string>("Line2");

                    b.Property<string>("Line3");

                    b.Property<int>("ParkId");

                    b.Property<string>("State");

                    b.Property<string>("Type");

                    b.Property<string>("Zipcode");

                    b.HasKey("AddressId");

                    b.HasIndex("ParkId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Yellowstone National Park",
                            Line1 = "Grand Loop Road",
                            Line2 = "Yellowstone National Park, WY 82190",
                            Line3 = "",
                            ParkId = 1,
                            State = "WY",
                            Type = "Physical Address",
                            Zipcode = "82190"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "West Yellowstone",
                            Line1 = "Chamber of Commerce of West Yellowstone",
                            Line2 = "30 Yellowstone Avenue",
                            Line3 = "West Yellowstone, MT 59758",
                            ParkId = 1,
                            State = "MT",
                            Type = "Physical Address",
                            Zipcode = "59758"
                        },
                        new
                        {
                            AddressId = 3,
                            City = "Yellowstone National Park",
                            Line1 = "PO Box 168",
                            Line2 = "Yellowstone National Park, WY 82190",
                            Line3 = "",
                            ParkId = 1,
                            State = "WY",
                            Type = "Mailing Address",
                            Zipcode = "82190"
                        },
                        new
                        {
                            AddressId = 4,
                            City = "Springdale",
                            Line1 = "1 Zion Park Blvd",
                            Line2 = "State Route 9",
                            Line3 = "Springdale, UT 84767",
                            ParkId = 2,
                            State = "UT",
                            Type = "Physical Address",
                            Zipcode = "84767"
                        },
                        new
                        {
                            AddressId = 5,
                            City = "Portland",
                            Line1 = "11321 SW Terwilliger Blvd",
                            Line2 = "Portland, OR 97219",
                            Line3 = "",
                            ParkId = 3,
                            State = "OR",
                            Type = "Physical Address",
                            Zipcode = "97219"
                        },
                        new
                        {
                            AddressId = 6,
                            City = "Bar Harbor",
                            Line1 = "Hulls Cove Visitor Center",
                            Line2 = "Route 3",
                            Line3 = "Bar Harbor, ME 04609",
                            ParkId = 4,
                            State = "ME",
                            Type = "Physical Address",
                            Zipcode = "04609"
                        });
                });

            modelBuilder.Entity("ParksApi.Models.Animal", b =>
                {
                    b.Property<int>("AnimalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommonName");

                    b.Property<string>("Description");

                    b.Property<string>("Diet");

                    b.Property<string>("ScientificName");

                    b.Property<string>("Type");

                    b.HasKey("AnimalId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            AnimalId = 1,
                            CommonName = "American Bison",
                            Description = "Often mistaken for buffaloes, these animals are the heaviest land animals in North America",
                            Diet = "Herbivore",
                            ScientificName = "Bison bison",
                            Type = "Mammal"
                        },
                        new
                        {
                            AnimalId = 2,
                            CommonName = "Red Fox",
                            Description = "Legendary for intelligence and cunning, red foxes are known for their red body and white underside and tipped tail; they live in many diverse habitats",
                            Diet = "Omnivore",
                            ScientificName = "Vulpes vulpes",
                            Type = "Mammal"
                        },
                        new
                        {
                            AnimalId = 3,
                            CommonName = "American Crow",
                            Description = "A common bird found across much of North America, it is all black with iridescent feathers",
                            Diet = "Omnivore",
                            ScientificName = "Corvus brachyrhynchos",
                            Type = "Bird"
                        },
                        new
                        {
                            AnimalId = 4,
                            CommonName = "Mallard",
                            Description = "Males (drakes) have a glossy green head and are grey on their wings and belly, while the females (hens or ducks) have mainly brown-speckled plumage",
                            Diet = "Omnivore",
                            ScientificName = "Anas platyrhynchos",
                            Type = "Bird"
                        },
                        new
                        {
                            AnimalId = 5,
                            CommonName = "Spotted Salamander",
                            Description = "Common in the eastern United States, it is stout in body and mostly black with two uneven rows of yellowish spots",
                            Diet = "Carnivore",
                            ScientificName = "Ambystoma maculatum",
                            Type = "Amphibian"
                        },
                        new
                        {
                            AnimalId = 6,
                            CommonName = "Texas Horned Lizard",
                            Description = "Similar to other lizards in its species, it is patterned and brown-toned with a spikey body, however it stands out as the largest bodied of its kind",
                            Diet = "Carnivore",
                            ScientificName = "Phrynosoma cornutum",
                            Type = "Amphibian"
                        });
                });

            modelBuilder.Entity("ParksApi.Models.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Cost");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("ParkId");

                    b.HasKey("FeeId");

                    b.HasIndex("ParkId");

                    b.ToTable("Fees");

                    b.HasData(
                        new
                        {
                            FeeId = 1,
                            Cost = 35.0,
                            Description = "Good for entry of private vehicle and all occupants to Yellowstone for 7 days from date of purchase",
                            Name = "Yellowstone Private Vehicle, 7-day",
                            ParkId = 1
                        },
                        new
                        {
                            FeeId = 2,
                            Cost = 35.0,
                            Description = "Admits private, non-commercial vehicles and all occupants",
                            Name = "Zion Private Vehicle, 7-day",
                            ParkId = 2
                        },
                        new
                        {
                            FeeId = 3,
                            Cost = 20.0,
                            Description = "Admits a single individual with no car; includes bicyclists, hikers and pedestrians",
                            Name = "Zion Per Person, 7-day",
                            ParkId = 2
                        },
                        new
                        {
                            FeeId = 4,
                            Cost = 20.0,
                            Description = "Admits one senior to all federal fee areas for one year from date of purchase",
                            Name = "Zion Senior Annual Pass",
                            ParkId = 2
                        },
                        new
                        {
                            FeeId = 5,
                            Cost = 50.0,
                            Description = "Admits a single individual for one year from date of purchase",
                            Name = "Zion Annual Pass",
                            ParkId = 2
                        },
                        new
                        {
                            FeeId = 6,
                            Cost = 20.0,
                            Description = "Good for single individual entry to Yellowstone for 7 days from date of purchase",
                            Name = "Yellowstone Per Person",
                            ParkId = 1
                        },
                        new
                        {
                            FeeId = 7,
                            Cost = 70.0,
                            Description = "Admits entrance to Yellowstone for one year. When travelling by snowcoach or shuttle, it admits the holder and up to 3 additional individuals",
                            Name = "Yellowstone Annual Pass",
                            ParkId = 1
                        },
                        new
                        {
                            FeeId = 8,
                            Cost = 70.0,
                            Description = "Admits entrance to Yellowstone for one year. When travelling by snowcoach or shuttle, it admits the holder and up to 3 additional individuals",
                            Name = "Yellowstone Annual Pass",
                            ParkId = 1
                        },
                        new
                        {
                            FeeId = 9,
                            Cost = 30.0,
                            Description = "Good for entry of private vehicle and all occupants to Yellowstone for 7 days from date of purchase",
                            Name = "Acadia Private Vehicle, 7-day",
                            ParkId = 4
                        },
                        new
                        {
                            FeeId = 10,
                            Cost = 15.0,
                            Description = "Admits a single individual with no car; includes bicyclists, hikers and pedestrians",
                            Name = "Acadia Per Person, 7-day",
                            ParkId = 4
                        },
                        new
                        {
                            FeeId = 11,
                            Cost = 55.0,
                            Description = "Admits a private vehicle and all passengers entry to Acadia. Valid for 12 months from purchase date",
                            Name = "Acadia Annual Pass",
                            ParkId = 4
                        });
                });

            modelBuilder.Entity("ParksApi.Models.LocalWildlife", b =>
                {
                    b.Property<int>("LocalWildlifeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimalId");

                    b.Property<int>("ParkId");

                    b.HasKey("LocalWildlifeId");

                    b.HasIndex("AnimalId");

                    b.HasIndex("ParkId");

                    b.ToTable("LocalWildlife");

                    b.HasData(
                        new
                        {
                            LocalWildlifeId = 1,
                            AnimalId = 1,
                            ParkId = 1
                        },
                        new
                        {
                            LocalWildlifeId = 2,
                            AnimalId = 2,
                            ParkId = 1
                        },
                        new
                        {
                            LocalWildlifeId = 3,
                            AnimalId = 3,
                            ParkId = 1
                        },
                        new
                        {
                            LocalWildlifeId = 4,
                            AnimalId = 4,
                            ParkId = 1
                        },
                        new
                        {
                            LocalWildlifeId = 5,
                            AnimalId = 3,
                            ParkId = 3
                        },
                        new
                        {
                            LocalWildlifeId = 6,
                            AnimalId = 4,
                            ParkId = 3
                        },
                        new
                        {
                            LocalWildlifeId = 7,
                            AnimalId = 3,
                            ParkId = 2
                        },
                        new
                        {
                            LocalWildlifeId = 8,
                            AnimalId = 6,
                            ParkId = 2
                        },
                        new
                        {
                            LocalWildlifeId = 9,
                            AnimalId = 5,
                            ParkId = 4
                        },
                        new
                        {
                            LocalWildlifeId = 10,
                            AnimalId = 3,
                            ParkId = 4
                        },
                        new
                        {
                            LocalWildlifeId = 11,
                            AnimalId = 4,
                            ParkId = 4
                        });
                });

            modelBuilder.Entity("ParksApi.Models.Park", b =>
                {
                    b.Property<int>("ParkId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Designation");

                    b.Property<string>("Name");

                    b.Property<string>("OperatingHours");

                    b.Property<string>("ParkUrl");

                    b.HasKey("ParkId");

                    b.ToTable("Parks");

                    b.HasData(
                        new
                        {
                            ParkId = 1,
                            Description = "A large seasonal park with fountains, breath-taking views and open spaces to explore!",
                            Designation = "National Park",
                            Name = "Yellowstone",
                            OperatingHours = "24-hrs All Days",
                            ParkUrl = "https://www.nps.gov/yell/index.htm"
                        },
                        new
                        {
                            ParkId = 2,
                            Description = "Known for its massive sandstone cliffs of cream, pink and red contrasting agains a bright blue sky, it is an area full of history about native people and pioneers",
                            Designation = "National Park",
                            Name = "Zion National Park",
                            OperatingHours = "24-hrs All Days",
                            ParkUrl = "https://www.nps.gov/zion/index.htm"
                        },
                        new
                        {
                            ParkId = 3,
                            Description = "A well wooded park with many trails used for horse-back riding, hiking, running and walking",
                            Designation = "State Park",
                            Name = "Tryon Creek State National Area",
                            OperatingHours = "7am-5pm, changes seasonally",
                            ParkUrl = "https://oregonstateparks.org/index.cfm?do=parkPage.dsp_parkPage&parkId=103"
                        },
                        new
                        {
                            ParkId = 4,
                            Description = "One of the top 10 most-visited parks in the United States, it has the highest rocky headlands along the Atlantic coast",
                            Designation = "National Park",
                            Name = "Acadia National Park",
                            OperatingHours = "24-hrs All Days",
                            ParkUrl = "https://www.nps.gov/acad/index.htm"
                        });
                });

            modelBuilder.Entity("ParksApi.Models.Address", b =>
                {
                    b.HasOne("ParksApi.Models.Park", "Park")
                        .WithMany("VisitorCenterAddresses")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParksApi.Models.Fee", b =>
                {
                    b.HasOne("ParksApi.Models.Park", "Park")
                        .WithMany("Fees")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParksApi.Models.LocalWildlife", b =>
                {
                    b.HasOne("ParksApi.Models.Animal", "Animal")
                        .WithMany("Parks")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParksApi.Models.Park", "Park")
                        .WithMany("Animals")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
